#include <stdlib.h>
#include <stdint.h>
#include "include/F.h"
#include "include/keyGen.h"
#include "include/des.h"

uint64_t permute(uint64_t block, const int table[64])
{
    uint64_t res = 0;

    for (int i = 0; i < 64; i++)
    {
        int bit = (block >> (64 - table[i])) & 1;
        res |= ((uint64_t)bit << (63 - i));
    }

    return res;
}

uint64_t des_block(uint64_t block, uint64_t subkeys[], Operation operation)
{
    block = permute(block, IP);

    uint32_t R = block & L64_MASK;
    uint32_t L = (block & H64_MASK) >> 32;
    uint32_t RCopy;
    int subKeyIndex;

    for (int i = 0; i < 16; i++)
    {
        subKeyIndex = (operation == ENCRYPT) ? i : 15 - i;

        RCopy = R;

        R = F(R, subkeys[subKeyIndex]) ^ L;

        L = RCopy;
    }

    block = ((uint64_t)R << 32) | L;

    return permute(block, PI);
}
#include <stdint.h>
#include <stdlib.h>
#include "include/F.h"
extern const int E[48];
extern const char S[8][4][16];
extern const int P[32];

uint64_t expand(uint32_t right);
uint32_t keyed_substitution(uint64_t right);
uint32_t PBox_transposition(uint32_t right);

uint32_t F(uint32_t right,uint64_t subKey)
{
    // implamenting the mangler function

    uint32_t res;

    uint64_t expandedRight = expand(right);

    expandedRight ^= subKey;

    res = keyed_substitution(expandedRight);

    res = PBox_transposition(res);

    return res;
}

uint64_t expand(uint32_t right)
{
    uint64_t result = 0;

    for (int i = 0; i < 48; i++) {
        int bit_index = E[i] - 1; 
        int bit = (right >> (31 - bit_index)) & 1; 
        result |= ((uint64_t)bit << (47 - i)); 
    }

    return result;
}

uint32_t keyed_substitution(uint64_t right)
{
    uint32_t res = 0;

    for (int i = 0; i < 8; i++) {
        // Extract the i-th 6-bit chunk 
        // with the mask 0011 1111 (last 6 bits)
        uint8_t chunk = (right >> (42 - 6 * i)) & 0x3F;

        // Compute row and column
        int row = ((chunk & 0x20) >> 4) | (chunk & 0x01);  // bits 6 and 1
        int col = (chunk >> 1) & 0x0F;                     // bits 2–5

        // Lookup S-box output (4 bits)
        uint8_t s_out = S[i][row][col] & 0x0F;

        // Place into result (MSB-first)
        res |= s_out << (28 - 4 * i);
    }

    return res;
}

uint32_t PBox_transposition(uint32_t right)
{
    uint32_t res = 0;
    
    for (int i = 0; i < 32; i++)
    {
        //fetch the next bit according to the P box
        int bit = (right >> (32 - P[i])) & 1;

        //place it
        res |= (bit << (31 - i));
    }

    return res;
    
}#include <stdint.h>
#include <stdlib.h>
#include "include/keyGen.h"

extern const int PC1[56];
extern const int PC2[48];
extern const int LEFT_SHIFTS[NUM_OF_SUBKEYS];

uint64_t permuted_choice2(uint32_t Ci, uint32_t Di);

typedef struct keyGenType
{
    uint32_t Ci; // 28-bit
    uint32_t Di; // 28-bit
    int i;
} keyGen;

uint32_t circular_left_shift_28(uint32_t chunk, int nshifts)
{
    chunk &= 0x0FFFFFFF;
    return ((chunk << nshifts) | (chunk >> (28 - nshifts))) & 0x0FFFFFFF;
}

void permuted_choice1(uint64_t key, uint32_t *Ci, uint32_t *Di)
{
    *Ci = 0;
    *Di = 0;

    for (int i = 0; i < 28; i++) {
        int bit = (key >> (64 - PC1[i])) & 1;
        *Ci |= (bit << (27 - i));
    }

    for (int i = 0; i < 28; i++) {
        int bit = (key >> (64 - PC1[i + 28])) & 1;
        *Di |= (bit << (27 - i));
    }
}

uint64_t permuted_choice2(uint32_t Ci, uint32_t Di)
{
    uint64_t CD = (((uint64_t)Ci) << 28) | (Di & 0x0FFFFFFF); // combine into 56-bit
    uint64_t subkey = 0;

    for (int i = 0; i < 48; i++) {
        int bit = (CD >> (56 - PC2[i])) & 1;
        subkey |= ((uint64_t)bit << (47 - i));
    }

    return subkey;
}

void keyGen_init(keyGen *kg, uint64_t key)
{
    permuted_choice1(key, &kg->Ci, &kg->Di);  

    kg->i = 0;
}

uint64_t keyGen_next(keyGen *kg) {
    //shift the two halfs
    kg->Ci = circular_left_shift_28(kg->Ci,LEFT_SHIFTS[kg->i]);
    kg->Di = circular_left_shift_28(kg->Di,LEFT_SHIFTS[kg->i]);

    //incrament i
    kg->i++;

    //return the permuted Choice 2
    return permuted_choice2(kg->Ci,kg->Di)   ;
}

void generate_sub_keys(uint64_t key, uint64_t subkeys[16])
{
    keyGen kg;
    keyGen_init(&kg, key);

    for (int i = 0; i < NUM_OF_SUBKEYS; i++)
    {
        subkeys[i] = keyGen_next(&kg);  
    }
}

#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include "include/des.h"
#include "include/keyGen.h"
#include "include/modes.h"

#include <inttypes.h>

int main() {
    
}

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "include/des.h"
#include "include/keyGen.h"

#include <inttypes.h>

#define SIZE_OF_BLOCK_BYTES 8

uint64_t add_padding(...)
{
    
}

char *des_ECB_encrypt_string(...)
{
    
}

char *des_ECB_decrypt_string(...)
{
    
}
#define LB32_MASK 0x00000001
#define LB64_MASK 0x0000000000000001
#define L64_MASK 0x00000000ffffffff
#define H64_MASK 0xffffffff00000000

static const int IP[] = {
    58, 50, 42, 34, 26, 18, 10,  2, 
    60, 52, 44, 36, 28, 20, 12,  4, 
    62, 54, 46, 38, 30, 22, 14,  6, 
    64, 56, 48, 40, 32, 24, 16,  8, 
    57, 49, 41, 33, 25, 17,  9,  1, 
    59, 51, 43, 35, 27, 19, 11,  3, 
    61, 53, 45, 37, 29, 21, 13,  5, 
    63, 55, 47, 39, 31, 23, 15,  7
};

static const int PI[] = {
    40,  8, 48, 16, 56, 24, 64, 32, 
    39,  7, 47, 15, 55, 23, 63, 31, 
    38,  6, 46, 14, 54, 22, 62, 30, 
    37,  5, 45, 13, 53, 21, 61, 29, 
    36,  4, 44, 12, 52, 20, 60, 28, 
    35,  3, 43, 11, 51, 19, 59, 27, 
    34,  2, 42, 10, 50, 18, 58, 26, 
    33,  1, 41,  9, 49, 17, 57, 25
};

typedef enum
{
    ENCRYPT,
    DECRYPT
} Operation;

// typedef enum CipherMode
// {
//     ECB,
//     CBC,
//     CFB,
//     OFB,
//     CTR
// };

uint64_t des_block(uint64_t block, uint64_t subkeys[], Operation operation);
static const int E[48] = {
    32, 1, 2, 3, 4, 5,
    4, 5, 6, 7, 8, 9,
    8, 9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21,
    20, 21, 22, 23, 24, 25,
    24, 25, 26, 27, 28, 29,
    28, 29, 30, 31, 32, 1};

static const int P[32] = {
    16, 7, 20, 21,
    29, 12, 28, 17,
    1, 15, 23, 26,
    5, 18, 31, 10,
    2, 8, 24, 14,
    32, 27, 3, 9,
    19, 13, 30, 6,
    22, 11, 4, 25
};

//[box][row][column]
static const char S[8][4][16] = {
    {   // S1
        {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
        { 0,15,  7, 4,14,  2,13, 1,10,  6,12,11, 9, 5, 3, 8},
        { 4, 1, 14, 8,13,  6, 2,11,15, 12, 9, 7, 3,10, 5, 0},
        {15,12,  8, 2, 4,  9, 1, 7, 5, 11, 3,14,10, 0, 6,13}
    },
    {   // S2
        {15, 1,  8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10},
        { 3,13,  4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5},
        { 0,14,  7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15},
        {13, 8, 10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9}
    },
    {   // S3
        {10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8},
        {13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1},
        {13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7},
        { 1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12}
    },
    {   // S4
        { 7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15},
        {13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9},
        {10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4},
        { 3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14}
    },
    {   // S5
        { 2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9},
        {14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6},
        { 4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14},
        {11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3}
    },
    {   // S6
        {12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11},
        {10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8},
        { 9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6},
        { 4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13}
    },
    {   // S7
        { 4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1},
        {13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6},
        { 1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2},
        { 6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12}
    },
    {   // S8
        {13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7},
        { 1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2},
        { 7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8},
        { 2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11}
    }
};


uint32_t F(uint32_t right,uint64_t subKey);#define NUM_OF_SUBKEYS 16

// PC-1: 64-bit input key → 56-bit output (C0 and D0)
static const int PC1[56] = {
    57,49,41,33,25,17,9,
    1,58,50,42,34,26,18,
    10,2,59,51,43,35,27,
    19,11,3,60,52,44,36,
    63,55,47,39,31,23,15,
    7,62,54,46,38,30,22,
    14,6,61,53,45,37,29,
    21,13,5,28,20,12,4
};

// PC-2: 56-bit C||D → 48-bit subkey
static const int PC2[48] = {
    14,17,11,24,1,5,
    3,28,15,6,21,10,
    23,19,12,4,26,8,
    16,7,27,20,13,2,
    41,52,31,37,47,55,
    30,40,51,45,33,48,
    44,49,39,56,34,53,
    46,42,50,36,29,32
};

static const int LEFT_SHIFTS[16] = {
    1, 1, 2, 2,
    2, 2, 2, 2,
    1, 2, 2, 2,
    2, 2, 2, 1
};

void generate_sub_keys(uint64_t key,uint64_t subkeys[16]);#include <stdint.h>

uint64_t add_padding(uint64_t blockToPad, int numOfExistingBytes);

char *des_ECB_encrypt_string(const char *str, char *dst, uint64_t key);
char *des_ECB_decrypt_string(const char *cipher, char *dst, int length, uint64_t key);